# Nombre del workflow
name: Retrain and Build Docker Image

on:
  workflow_dispatch: # Permite lanzarlo manualmente

jobs:
  # Entrenar y subir el modelo 
  retrain:
    runs-on: ubuntu-latest
    
    # Definimos las salidas (outputs) de este trabajo para pasarlas al siguiente
    outputs:
      artifact_name: ${{ steps.training_run.outputs.artifact_name }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .
      
      - name: Ejecutar reentrenamiento del modelo
        id: training_run
        run: |
          TIMESTAMP=$(date +%Y%m%dT%H%M%S)
          ARTIFACT_NAME="model-artifacts-retrain-${TIMESTAMP}"
          echo "Generated artifact name: ${ARTIFACT_NAME}"
          
          # Se pasa el nombre del artifact como una salida para el siguiente job
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          
          # Ejecutamos el script de entrenamiento
          PYTHONPATH=src python -m mlops_housing.train --tag "retrain-${TIMESTAMP}"

      - name: Subir artifacts del nuevo modelo
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.training_run.outputs.artifact_name }}
          path: artifacts/
          retention-days: 5

  # --- Construir y subir la imagen Docker ---
  build_and_push:
    runs-on: ubuntu-latest
    # Este trabajo necesita que el trabajo 'retrain' termine con éxito
    needs: retrain
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Descargar artifacts del modelo del trabajo anterior
        uses: actions/download-artifact@v4
        with:
          # Usamos la salida 'artifact_name' del trabajo 'retrain'
          name: ${{ needs.retrain.outputs.artifact_name }}
          path: artifacts

      - name: Login en GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extraer metadatos y etiquetas para Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Construir y empujar la imagen Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}